buildscript {
  repositories { jcenter() }

  dependencies {
    classpath 'com.netflix.nebula:gradle-aggregate-javadocs-plugin:2.2.+'
  }
}

plugins {
  id 'net.researchgate.release' version '2.4.0'
}

apply plugin: 'nebula-aggregate-javadocs'
apply from: 'utils.gradle'
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'

import org.apache.tools.ant.filters.*

archivesBaseName = 'parent'

description = 'Client library to use the IBM Watson and Alchemy Services'

task docs(type: Javadoc) {
  destinationDir = file("$buildDir/docs/all")
  exclude {
//    subprojects.each {
//      '**/src/test/**'
//    }
  }
}

task copyJars(type: Copy) {
  from subprojects.collect { it.tasks.withType(Jar) }
  into "$buildDir/allJars"
}

task signJars(type: Copy) {
  from subprojects.collect { it.tasks.withType(Sign) }
  into "$buildDir/allJars"
}

allprojects {
  apply plugin: 'java' // *Compatibility has no effect before the 'java' plug-in is applied
  apply plugin: 'jacoco'

  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7

  repositories {
    mavenCentral()
  }
}

subprojects {

    rootProject.tasks.docs {
      exclude 'alchemy/src/test/**'
    }

  checkstyleTest {
    ignoreFailures = true
  }

  afterEvaluate {
    if (plugins.hasPlugin(JavaPlugin)) {
      rootProject.tasks.docs {
        source += files(sourceSets.collect { srcSet -> srcSet.allJava })
        classpath += files(sourceSets*.compileClasspath)
      }
    }
  }
}

task codeCoverageReport(type: JacocoReport) {
  // Gather execution data from all sub projects
  // (change this if you e.g. want to calculate unit test/integration test coverage separately)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  // Add all relevant source sets from the sub projects
  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    xml.destination "${buildDir}/reports/jacoco/report.xml"
    html.enabled true
    html.destination "${buildDir}/reports/jacoco"
    csv.enabled false
  }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
  subprojects*.test
  testReport
}

task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")

  // Include the results from the `test` task in all subprojects
  reportOn subprojects*.test
}

release {
  tagTemplate = 'java-sdk-$version'
}

task(startmessage) << {
    println 'starting build'
}

task(printversion) << {
    println project.version
}

beforeReleaseBuild.dependsOn startmessage
afterReleaseBuild.dependsOn printversion
