plugins {
  id 'net.researchgate.release' version '2.4.0'
  id 'me.champeau.gradle.japicmp' version '0.2.6'
}

apply from: 'utils.gradle'
apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'
apply plugin: 'idea'

archivesBaseName = 'parent'

description = 'Client library to use the IBM Watson and Alchemy Services'

javadoc {
  source = 'src/main/java'
}

checkstyle {
  ignoreFailures = false
}

checkstyleMain {
  ignoreFailures = false
}

checkstyleTest {
  ignoreFailures = false
}

task docs(type: Javadoc) {
  destinationDir = file("$buildDir/docs/all")
}

task copyJars(type: Copy) {
  from subprojects.collect { it.tasks.withType(Jar) }
  into "$buildDir/allJars"
}

task signJars(type: Copy) {
  from subprojects.collect { it.tasks.withType(Sign) }
  into "$buildDir/allJars"
}

allprojects {
  apply plugin: 'java' // *Compatibility has no effect before the 'java' plug-in is applied
  apply plugin: 'jacoco'

  sourceCompatibility = JavaVersion.VERSION_1_7
  targetCompatibility = JavaVersion.VERSION_1_7

  repositories {
    mavenCentral()
  }
}

subprojects {

  dependencies {
    testCompile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '3.8.0'
    testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testCompile group: 'com.google.guava', name: 'guava', version: '20.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
  }

  checkstyleMain {
    ignoreFailures = false
  }

  checkstyleTest {
    ignoreFailures = false
  }

  test {
    testLogging {
      events "failed"
      exceptionFormat "full"
    }
  }

  afterEvaluate {
    if (plugins.hasPlugin(JavaPlugin)) {
      rootProject.tasks.docs {
        source += files(sourceSets.main.allJava)
        classpath += files(sourceSets*.compileClasspath)
      }
    }
  }
}

task codeCoverageReport(type: JacocoReport) {
  // Gather execution data from all sub projects
  // (change this if you e.g. want to calculate unit test/integration test coverage separately)
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  // Add all relevant source sets from the sub projects
  subprojects.each {
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled true
    xml.destination "${buildDir}/reports/jacoco/report.xml"
    html.enabled true
    html.destination "${buildDir}/reports/jacoco"
    csv.enabled false
  }
}

// always run the tests before generating the report
codeCoverageReport.dependsOn {
  subprojects*.test
  testReport
}

task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")

  // Include the results from the `test` task in all subprojects
  reportOn subprojects*.test
}

release {
    tagTemplate = 'java-sdk-$version'
}

task startmessage {
  doLast {
    println 'starting build'
  }
}

task japicmp(type: me.champeau.gradle.japicmp.JapicmpTask) {
    ext.oldJarVersion = project.hasProperty('oldJarVersion') ? project.getProperty('oldJarVersion') : "pass-in-older-jar-version"
    ext.newJarVersion = project.hasProperty('newJarVersion') ? project.getProperty('newJarVersion') : "pass-in-newer-jar-version"
    ext.oldJarPath = project.hasProperty('oldJarPath') ? project.getProperty('oldJarPath') : "pass/in/path/to/older/version.jar"
    ext.newJarPath = project.hasProperty('newJarPath') ? project.getProperty('newJarPath') : "pass/in/path/to/newer/version.jar"

    oldClasspath = files(oldJarPath)
    newClasspath = files(newJarPath)

    onlyModified = true
    failOnModification = true

    htmlOutputFile = file("$buildDir/reports/java-sdk-api-diff-" + oldJarVersion + "-to-" + newJarVersion + ".html")
}

beforeReleaseBuild.dependsOn startmessage
