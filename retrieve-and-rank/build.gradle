plugins {
    id 'ru.vyarus.animalsniffer' version '1.3.0'
}

defaultTasks 'clean'

apply from: '../utils.gradle'
import org.apache.tools.ant.filters.*

apply plugin: 'java'
apply plugin: 'ru.vyarus.animalsniffer'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'checkstyle'
apply plugin: 'eclipse'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

repositories {
    mavenCentral()
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

signArchives {
    onlyIf { Task task ->
        def shouldExec = false
        for (myArg in project.gradle.startParameter.taskRequests[0].args) {
            if (myArg.toLowerCase().contains('signjars') || myArg.toLowerCase().contains('uploadarchives')) {
                shouldExec = true
            }
        }
        return shouldExec
    }
}

checkstyle {
    configFile = rootProject.file('checkstyle.xml')
    ignoreFailures = false
}

dependencies {
    compile project(':core')

    testCompile project(path: ':core', configuration: 'tests')
    testCompile project(':document-conversion')

    signature 'org.codehaus.mojo.signature:java17:1.0@signature'
}

processResources {
    filter ReplaceTokens, tokens: [
            "pom.version": project.version,
            "build.date" : getDate()
    ]
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "http://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.env.CI_DEPLOY_USERNAME, password: System.env.CI_DEPLOY_PASSWORD)
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/"){
                authentication(userName: System.env.CI_DEPLOY_USERNAME, password: System.env.CI_DEPLOY_PASSWORD)
            }
            pom.project {
                name 'retrieve-and-rank'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Client library to use the IBM Watson Retrieve and Rank Service'
                url 'https://www.ibm.com/watson/developercloud/retrieve-rank.html'

                scm {
                    connection 'scm:git:git@github.com:watson-developer-cloud/java-sdk.git'
                    developerConnection 'scm:git:git@github.com:watson-developer-cloud/java-sdk.git'
                    url 'https://github.com/watson-developer-cloud/java-sdk'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'german'
                        name 'German Attanasio'
                        email 'germanatt@us.ibm.com'
                    }
                }
            }
        }
    }
}
